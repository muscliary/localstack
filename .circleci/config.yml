version: 2.1

#orbs:
#  slack: circleci/slack@4.4.2

jobs:
  install:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: /tmp/workspace/repo
    steps:
      - checkout
      - restore_cache:
          key: python-requirements-{{ checksum "requirements.txt" }}
      - run:
          name: Install prerequisites
          command: |
            sudo apt-get update
            sudo apt-get install -y libsasl2-dev python3.8-venv python3.8-dev
      - run:
          name: Setup environment
          environment:
            VENV_BIN: "/usr/bin/python3.8 -m venv"
          command: |
            make install
            mkdir -p target/reports
            mkdir -p target/coverage
      - save_cache:
          key: python-requirements-{{ checksum "requirements.txt" }}
          paths:
            - "~/.cache/pip"
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo

  preflight:
    docker:
      - image: buildpack-deps:focal
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Linting
          command: make lint
      - run:
          name: Unit tests
          command: |
            source .venv/bin/activate
            pytest tests/unit --junitxml=target/reports/unit-tests.xml -o junit_suite_name=unit-tests
      - store_test_results:
          path: target/reports/

  itest-lambda-docker:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Pull lambda runtimes
          command: |
            sudo useradd localstack -s /bin/bash
            docker pull -q lambci/lambda:20191117-nodejs8.10
            docker pull -q lambci/lambda:20191117-ruby2.5
            docker pull -q lambci/lambda:20210129-ruby2.7
            docker pull -q lambci/lambda:20191117-python3.6
            docker pull -q lambci/lambda:20191117-dotnetcore2.0
            docker pull -q lambci/lambda:dotnetcore3.1
            docker pull -q lambci/lambda:20191117-provided
            docker pull -q lambci/lambda:java8
            docker pull -q lambci/lambda:python3.8
      - run:
          name: Test docker client
          environment:
            DEBUG: 1
            TEST_PATH: "tests/integration/docker_utils"
            TEST_SKIP_LOCALSTACK_START: 1
            PYTEST_ARGS: "--reruns 2 --junitxml=target/reports/docker-client.xml -o junit_suite_name='docker-client'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Test docker lambda executor
          environment:
            DEBUG: 1
            LAMBDA_EXECUTOR: "docker"
            USE_SSL: 1
            TEST_ERROR_INJECTION: 1
            TEST_PATH: "tests/integration/test_lambda.py tests/integration/test_integration.py"
            PYTEST_ARGS: "--reruns 2 --junitxml=target/reports/lambda-docker.xml -o junit_suite_name='lambda-docker'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Test docker-reuse lambda executor
          environment:
            DEBUG: 1
            LAMBDA_EXECUTOR: "docker-reuse"
            TEST_PATH: "tests/integration/test_lambda.py tests/integration/test_integration.py"
            PYTEST_ARGS: "--reruns 2 --junitxml=target/reports/lambda-docker-reuse.xml -o junit_suite_name='lambda-docker-reuse'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage
      - store_test_results:
          path: target/reports/

  itest-elasticmq:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Test elasticmq SQS provider
          environment:
            DEBUG: 1
            SQS_PROVIDER: "elasticmq"
            TEST_PATH: "tests/integration/test_sns.py -k test_publish_sqs_from_sns_with_xray_propagation"
            PYTEST_ARGS: "--junitxml=target/reports/elasticmq.xml -o junit_suite_name='elasticmq'"
            COVERAGE_ARGS: "-p"
          command: make test-coverage
      - run:
          name: Store coverage results
          command: mv .coverage.* target/coverage/
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo/target/coverage
      - store_test_results:
          path: target/reports/

  docker-build-amd64:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Initialize build environment
          command: make init
      - run:
          name: Build localstack docker image
          command: make docker-build-linux-amd64
      - run:
          name: Output the Image Stats
          command: make docker-image-stats
      - run:
          name: Run the tests
          command: |
            PYTEST_ARGS='--junitxml=target/reports/test-report-amd64.xml' \
            COVERAGE_FILE='target/coverage/.coverage.amd64' \
            make docker-run-tests
      - run:
          name: Save docker image
          command: |
            test "$CIRCLE_BRANCH" = "master" \
              && PLATFORM="amd64" make docker-save-image || true
      - run:
          name: Build light docker image
          command: |
            test "$CIRCLE_BRANCH" = "master" \
              && make docker-build-linux-amd64-light || true
      - run:
          name: Save light docker image
          command: |
            test "$CIRCLE_BRANCH" = "master" \
              && PLATFORM="amd64" make docker-save-image-light || true
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo
      - store_test_results:
          path: target/reports/

  docker-build-arm64:
    machine:
      # The latest version of ubuntu is not yet supported for ARM: https://circleci.com/docs/2.0/arm-resources/
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          # Since we are using an old version of ubuntu, we need to install the latest version of docker
          name: Update docker engine to most current
          command: |
            # Remove old version
            sudo apt-get remove --purge docker docker-engine docker.io containerd runc -y
            # Install Docker deb package repo
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
              sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
              | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            # Install the latest version of Docker and haveged
            # (https://github.com/docker/compose/issues/6678#issuecomment-526831488)
            sudo apt-get install docker-ce docker-ce-cli containerd.io haveged -y
            sudo usermod -aG docker $USER
      - run:
          name: Build localstack docker image
          command: make docker-build-linux-arm64
      - run:
          name: Output the Image Stats
          command: make docker-image-stats
      - run:
          name: Install amd64 emulation support for lambda tests
          command: |
            docker run --rm --privileged tonistiigi/binfmt:latest --install all
            docker buildx create --name multiarch-builder --use
      - run:
          name: Run the tests
          command: |
            PYTEST_ARGS='--junitxml=target/reports/test-report-arm64.xml' \
            COVERAGE_FILE='target/coverage/.coverage.arm64' \
            make docker-run-tests
      - run:
          name: Save docker image
          command: |
            test "$CIRCLE_BRANCH" = "master" \
              && PLATFORM="arm64" make docker-save-image || true
      - run:
          name: Build light docker image
          command: |
            test "$CIRCLE_BRANCH" = "master" \
              && make docker-build-linux-amd64-light || true
      - run:
          name: Save light docker image
          command: |
            test "$CIRCLE_BRANCH" = "master" \
              && PLATFORM="arm64" make docker-save-image-light || true
      - persist_to_workspace:
          root:
            /tmp/workspace
          paths:
            - repo
      - store_test_results:
          path: target/reports/

  report:
    docker:
      - image: buildpack-deps:focal
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Collect coverage
          command: |
            source .venv/bin/activate
            cd target/coverage
            ls -la
            coverage combine
            mv .coverage ../../
      - run:
          name: Report coverage statistics
          command: |
            source .venv/bin/activate
            coverage report || true
            coverage html || true
            coveralls || true
#      - slack/notify:
#          event: pass
#          template: basic_success_1
      - store_artifacts:
          path: htmlcov/

  docker-push-amd64:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i target/localstack-docker-image-amd64.tar
      - run:
          name: Load docker image light
          command: docker load -i target/localstack-docker-image-light-amd64.tar
      - run:
          name: Run pre-release smoke tests
          command: make ci-pro-smoke-tests
      - run:
          name: Push docker image
          command: PLATFORM="amd64" make docker-push-master

  docker-push-arm64:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i target/localstack-docker-image-arm64.tar
      - run:
          name: Load docker image light
          command: docker load -i target/localstack-docker-image-light-arm64.tar
      - run:
          name: Run pre-release smoke tests
          command: make ci-pro-smoke-tests
      - run:
          name: Push docker image
          command: PLATFORM="arm64" make docker-push-master

  docker-create-manifests:
    machine:
      image: ubuntu-2004:202107-02
    working_directory: /tmp/workspace/repo
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: create multi-platform manifests
          command: make docker-create-manifests
      - run:
          name: create multi-platform manifests light
          command: make docker-create-manifests-light

workflows:
  main:
    jobs:
      - install
      - preflight:
          requires:
            - install
      - itest-lambda-docker:
          requires:
            - preflight
      - itest-elasticmq:
          requires:
            - preflight
      - docker-build-amd64:
          requires:
            - preflight
      - docker-build-arm64:
          requires:
            - preflight
      - report:
          requires:
            - itest-lambda-docker
            - itest-elasticmq
            - docker-build-amd64
      - docker-push-amd64:
          filters:
            branches:
              only: master
          requires:
            - itest-lambda-docker
            - itest-elasticmq
            - docker-build-amd64
            - docker-build-arm64
      - docker-push-arm64:
          filters:
            branches:
              only: master
          requires:
            - itest-lambda-docker
            - itest-elasticmq
            - docker-build-amd64
            - docker-build-arm64
      - docker-create-manifests:
          filters:
            branches:
              only: master
          requires:
            - docker-push-amd64
            - docker-push-arm64